name: Test
on:
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]
        python: ["3.7", "3.8", "3.9"]
      fail-fast: false
    name: Test on ${{ matrix.os }} with Python ${{ matrix.python }}
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}
          architecture: "x64"

      - name: Set environment variables
        run: python scripts/set_environment.py

      - uses: actions/setup-java@v2
        with:
          distribution: adopt
          java-version: ${{ env.JAVA_VERSION }}

      # Install Poetry
      - if: matrix.os == 'windows-latest'
        name: Install poetry [Windows]
        run: pip install poetry
      - if: matrix.os != 'windows-latest'
        name: Install poetry [Ubuntu/macOS]
        run: pip3 install poetry

      - name: Install python dependencies
        run: poetry install

      - name: Build JDK
        run: poetry run python scripts/build_jdk.py

      - name: Build wheel
        env:
          JDK4PY_BUILD_PLATFORM: ubuntu-latest
        run: poetry run python setup.py bdist_wheel --build-number ${{ env.JDK4PY_BUILD_NUMBER }}

      - name: Test
        run: poetry run pytest

      # No need to upload the package for each Python version
      - if: matrix.python == '3.8'
        uses: actions/upload-artifact@v2
        with:
          name: jdk4py-${{ matrix.os }}.whl
          path: dist/jdk4py-*.whl

  conda-package:
    runs-on: ubuntu-latest
    name: Test Conda packaging
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-python@v2
        with:
          python-version: 3.8
          architecture: "x64"

      - name: Set environment variables
        run: python scripts/set_environment.py

      - uses: actions/setup-java@v2
        with:
          distribution: adopt
          java-version: ${{ env.JAVA_VERSION }}

      - name: Install poetry
        run: pip3 install poetry

      - name: Install python dependencies
        run: poetry install

      - name: Build JDK
        run: poetry run python scripts/build_jdk.py

      - uses: conda-incubator/setup-miniconda@v2
        with:
          channels: conda-forge
          conda-build-version: 3.20.0

      - name: Build Conda package
        run: conda build --debug --no-anaconda-upload --output-folder dist .
