name: Test
on:
  pull_request:
    branches:
      - master

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest]
        python: ["3.7"]
      fail-fast: false # To not cancel other platforms when one fails
    name: Test on ${{ matrix.os }} with Python ${{ matrix.python }}
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}
          architecture: "x64"

      - name: Set Java version
        run: python scripts/set_versions.py

      - uses: joschi/setup-jdk@v2 # We must use to the official action once https://github.com/actions/setup-java/pull/97 is closed
        with:
          java-version: ${{ env.MAJOR_JAVA_VERSION }}
          java-package: jdk # (jre, jdk, or jdk+fx) - defaults to jdk
          architecture: x64

      # Install Poetry
      - if: matrix.os == 'windows-latest'
        name: Install poetry [Windows]
        run: pip install poetry
      - if: matrix.os != 'windows-latest'
        name: Install poetry [Ubuntu/macOS]
        run: pip3 install poetry

      - name: Install python dependencies
        run: poetry install

      - name: Build JDK
        run: poetry run python scripts/build_jdk.py

      - name: Test
        run: poetry run pytest

  package: # only on latest Ubuntu and Python
    runs-on: windows-latest
    name: Test packaging wheel and Conda
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-python@v2
        with:
          python-version: "3.8"
          architecture: "x64"

      - name: Set Java version
        run: python scripts/set_versions.py

      - uses: joschi/setup-jdk@v2 # We must use to the official action once https://github.com/actions/setup-java/pull/97 is closed
        with:
          java-version: ${{ env.MAJOR_JAVA_VERSION }}
          java-package: jdk
          architecture: x64

      - name: Install Poetry Windows
        run: pip install poetry

      - name: Install python dependencies
        run: poetry install

      - name: Build JDK
        run: poetry run python scripts/build_jdk.py

      - name: Build wheel
        env:
          JDK4PY_BUILD_PLATFORM: windows-latest
        run: poetry run python setup.py bdist_wheel

      - name: Check python
        run: poetry run python -c "import sys; print('\n'.join(sys.path))"

      - uses: conda-incubator/setup-miniconda@v2
        with:
          channels: conda-forge
          conda-build-version: 3.20.0

      - name: Build Conda package on ubuntu and latest Python
        run: conda build --output-folder dist . --no-anaconda-upload --debug

      - name: Check python2
        run: poetry run python -c "import sys; print('\n'.join(sys.path))"

      - name: deactivate conda
        run: conda env remove -n test

      - name: Install python dependencies2
        run: poetry install

      - name: Check python3
        run: poetry run python -c "import sys; print('\n'.join(sys.path))"

      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: jdk4py.tar.bz2
          path: /usr/local/miniconda/conda-bld/broken/*